package model;

import exceptions.IllegalCropException;
import org.json.JSONArray;
import org.json.JSONObject;

import java.util.ArrayList;
import java.util.List;

/* Represents a farmer with his/her location (standardized by govt),
 * private id in market (Generated by Market), contact of farmer and
 * the list of crops he/she wants to represent in the market.
 */

public class Farmer {
    private int location;           //location of the farmer
    private int privateId;          //private id of the farmer in the market
    private int contact;            //contact of the farmer
    private List<Crop> crops;       //the crops he wants to sell on the market

    //if the programmer extends the market class to implement online transactions, following variable can be used
    //  private int balance;

    /* REQUIRES: location must be a standardized number measured from the capital city of the state
     *           contact must be a working and valid phone number
     * MODIFIES: this
     * EFFECTS: Sets the location of the farmer, the initial crop list to empty,
     *          private id of the farmer and contact phone number
     */
    public Farmer(int location, int privateId, int contact) {
        this.location = location;
        crops = new ArrayList<>();
        this.privateId = privateId;
        this.contact = contact;
    }

    public int getLocation() {
        return this.location;
    }

    public int getPrivateId() {
        return this.privateId;
    }

    public List<Crop> getCrops() {
        return this.crops;
    }

    public int getContact() {
        return this.contact;
    }

    /*
     * MODIFIES: this
     * EFFECTS: Adds the new crop to the crop list.
     */
    public boolean addCrop(Crop newCrop) {
        Crop duplicationCheck = getSpecificCrop(newCrop.getType());
        if (getCrops().contains(duplicationCheck)) {
            return false;
        } else {
            crops.add(newCrop);
            return true;
        }
    }

    /*
     * MODIFIES: this
     * EFFECTS: Removes the crop of the provided name from the crop list and return true, false otherwise.
     */
    public boolean removeCrop(String cropType) {
        Crop toRemove = getSpecificCrop(cropType);
        if (toRemove != null) {
            crops.remove(toRemove);
            System.out.println("Returns true");
            return true;
        }
        return false;
    }

    /*
     * REQUIRES: The crop which needs to be changed has to be present in the list.
     *           traitToChange must not be the type of crop.
     * MODIFIES: this
     * EFFECTS:  If the traitToChange is quality/ quantity/ price - sets that trait to new value respectively,
     *           and returns true.
     *           Type(name) of the crop cannot be changed - returns false in case that happens.
     */
    public boolean modifyCrops(String cropType, String traitToChange, int newValueTrait) throws IllegalCropException {
        Crop toModify = getSpecificCrop(cropType);
        if (toModify != null) {
            if (traitToChange.equals("quality")) {
                toModify.setQualityIndex(newValueTrait);
            } else if (traitToChange.equals("price")) {
                toModify.setPrice(newValueTrait);
            } else if (traitToChange.equals("quantity")) {
                toModify.setQuantity(newValueTrait);
            } else {
                throw new IllegalCropException("Not valid");
            }
            return true;
        } else {
            return false;
        }

    }

    /*
     * EFFECTS: If the crop is present in crop List, returns the crop of the provided name from the crop list,
     *          returns null otherwise.
     */
    public Crop getSpecificCrop(String cropType) {
        for (Crop crop : crops) {
            if (crop.getType().equals(cropType)) {
                return crop;
            }
        }
        return null;
    }

    /*
     * EFFECTS: returns a string representation of crop list
     */
    public String displayCropList() {
        String cropList = "\n";
        for (Crop crop : crops) {
            cropList += crop.displayCrop();

        }
        return cropList;
    }

    /*
     * EFFECTS: returns crops pf this farmer as a JSON array
     */
    public JSONArray getCropsJson() {
        JSONArray jsonArray = new JSONArray();
        JSONObject jsonObjectCrop;
        for (Crop crop : crops) {
            jsonObjectCrop = new JSONObject();
            jsonObjectCrop.put("cropType", crop.getType());
            jsonObjectCrop.put("cropQuality", crop.getQuality());
            jsonObjectCrop.put("cropQuantity", crop.getQuantity());
            jsonObjectCrop.put("cropPrice", crop.getPrice());
            jsonArray.put(jsonObjectCrop);
        }
        return jsonArray;
    }
}
